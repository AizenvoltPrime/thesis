Media divisor source: https://css-tricks.com/turning-a-fixed-size-object-into-a-responsive-element/
https://www.w3schools.com/howto/howto_js_sidenav.asp
Remove blue highlight: https://www.youtube.com/watch?v=DVrJtKI8N2I
Hide menu Johncy:https://stackoverflow.com/questions/29960942/hide-menu-sidebar-when-clicking-outside-the-bar-or-the-button
get data from date format Clyde Lobo:https://stackoverflow.com/questions/12246394/how-to-get-month-from-string-in-javascript
get coordinates by clicking map:https://codepen.io/ckpunmep/pen/QOmwxQ?editors=1111
https://stackoverflow.com/questions/18883601/function-to-calculate-distance-between-two-coordinates
for radius text input filter emkey08:https://stackoverflow.com/questions/469357/html-text-input-allow-only-numeric-input 
css transition autocomplete Hannes Schneidermayer:https://stackoverflow.com/questions/2781549/removing-input-background-colour-for-chrome-autocomplete
greece geojson:https://github.com/codeforgermany/click_that_hood/commit/91e31e6a70f57009b80c152d4c0268ecae011080
d3.geoContains:https://stackoverflow.com/questions/59864895/point-in-polygon-using-leaflet-pip-and-d3-geocontains
switch for radius filter css:https://www.w3schools.com/howto/howto_css_switch.asp
all dates between:https://bobbyhadz.com/blog/javascript-get-all-dates-between-two-dates
how to get ipadress:https://thirteenov.ciihuy.com/how-to-detect-users-ip-address-with-php/
get location from ipadress:https://www.youtube.com/watch?v=--_acK_RaMU&t=148s
stars css,html:https://www.youtube.com/watch?v=zDHC4r5eCdY
dragging map:https://www.w3schools.com/howto/tryit.asp?filename=tryhow_js_draggable
dropdown:https://jsfiddle.net/34adrsgu/
sort array approval Ezekiel Victor:https://stackoverflow.com/questions/16888615/javascript-sort-2-array-dependently

//posts_info
CREATE VIEW posts_info AS SELECT posts.post_number AS post_number, user.username AS username, polls.poll_id AS poll_id, categories.category_name 
AS category_name, posts.post_text AS post_text, sum(chevron_vote.chevron_result) AS chevron_result, posts.post_date 
AS post_date,posts.post_loc_lat AS post_loc_lat,posts.post_loc_long AS post_loc_long,posts.post_expiration_date AS post_expiration_date FROM posts join user on posts.user_id = user.id join polls on posts.poll_type = polls.poll_id join categories on posts.post_category = categories.category_id 
join chevron_vote ON posts.post_number = chevron_vote.post_id GROUP BY posts.post_number ORDER BY posts.post_date DESC

//posts_yes_no_info
CREATE VIEW posts_yes_no_info AS SELECT posts.post_number AS post_number, user.username AS username, categories.category_name 
AS category_name, posts.post_text AS post_text, sum(yes_no.answer_yes) AS number_of_yes, sum(yes_no.answer_no) AS number_of_no, posts.post_date 
AS post_date FROM posts join user on posts.user_id = user.id join categories on posts.post_category = categories.category_id 
join yes_no ON posts.post_number = yes_no.post_id GROUP BY posts.post_number ORDER BY posts.post_date DESC

//posts_rating_info
CREATE VIEW posts_rating_info AS SELECT rating.post_id AS rating_post_id, AVG(rating.choice_one) AS rating_choice_one_avg,AVG(rating.choice_two) AS rating_choice_two_avg, 
AVG(rating.choice_three) AS rating_choice_three_avg, AVG(rating.choice_four) AS rating_choice_four_avg,AVG(rating.choice_five) AS rating_choice_five_avg,
AVG(rating.choice_six) AS rating_choice_six_avg, AVG(rating.choice_seven) AS rating_choice_seven_avg, AVG(rating.choice_eight) AS rating_choice_eight_avg,
AVG(rating.choice_nine) AS rating_choice_nine_avg, AVG(rating.choice_ten) AS rating_choice_ten_avg, AVG(rating.choice_eleven) AS rating_choice_eleven_avg,
AVG(rating.choice_twelve) AS rating_choice_twelve_avg, AVG(rating.choice_thirteen) AS rating_choice_thirteen_avg, AVG(rating.choice_fourteen) AS rating_choice_fourteen_avg,
AVG(rating.choice_fifteen) AS rating_choice_fifteen_avg, AVG(rating.choice_sixteen) AS rating_choice_sixteen_avg, AVG(rating.choice_seventeen) AS rating_choice_seventeen_avg,
AVG(rating.choice_eighteen) AS rating_choice_eighteen_avg, AVG(rating.choice_nineteen) AS rating_choice_nineteen_avg, AVG(rating.choice_twenty) AS rating_choice_twenty_avg
FROM rating GROUP BY rating_post_id;

//posts_approval_info
CREATE VIEW posts_approval_info AS SELECT approval.post_id AS approval_post_id, SUM(approval.choice_one) AS approval_choice_one,SUM(approval.choice_two) AS approval_choice_two, 
SUM(approval.choice_three) AS approval_choice_three, SUM(approval.choice_four) AS approval_choice_four,SUM(approval.choice_five) AS approval_choice_five,
SUM(approval.choice_six) AS approval_choice_six, SUM(approval.choice_seven) AS approval_choice_seven,SUM(approval.choice_eight) AS approval_choice_eight,
SUM(approval.choice_nine) AS approval_choice_nine, SUM(approval.choice_ten) AS approval_choice_ten,SUM(approval.choice_eleven) AS approval_choice_eleven,
SUM(approval.choice_twelve) AS approval_choice_twelve, SUM(approval.choice_thirteen) AS approval_choice_thirteen, SUM(approval.choice_fourteen) AS approval_choice_fourteen,
SUM(approval.choice_fifteen) AS approval_choice_fifteen,SUM(approval.choice_sixteen) AS approval_choice_sixteen, SUM(approval.choice_seventeen) AS approval_choice_seventeen,
SUM(approval.choice_eighteen) AS approval_choice_eighteen, SUM(approval.choice_nineteen) AS approval_choice_nineteen, SUM(approval.choice_twenty) AS approval_choice_twenty
FROM approval GROUP BY approval_post_id;

//user sql request
SELECT posts.post_number AS post_number, user.username AS username, polls.poll_name AS poll_name, categories.category_name AS category_name,
            posts.post_text AS post_text, sum(chevron_vote.chevron_result) AS chevron_result, posts.post_date AS post_date, 
            COALESCE((SELECT chevron_vote.chevron_result FROM chevron_vote WHERE chevron_vote.user_id=1 and chevron_vote.post_id=post_number),0) AS user_chevron_result,
            COALESCE((SELECT yes_no.answer_yes FROM yes_no WHERE yes_no.user_id=1 and yes_no.post_id=post_number),0) AS user_yes_answer,
            COALESCE((SELECT yes_no.answer_no FROM yes_no WHERE yes_no.user_id=1 and yes_no.post_id=post_number),0) AS user_no_answer,
            COALESCE((SELECT bookmarks.user_bookmark FROM bookmarks WHERE bookmarks.user_id=1 and bookmarks.post_id=post_number),0) AS user_bookmark,
            posts.post_expiration_date AS post_expiration_date
            FROM posts join user on posts.user_id = user.id join polls on posts.poll_type = polls.poll_id join categories 
            on posts.post_category = categories.category_id join chevron_vote ON posts.post_number = chevron_vote.post_id join bookmarks ON posts.post_number=bookmarks.post_id
            GROUP BY posts.post_number ORDER BY posts.post_date DESC

//bookmarks sql request
SELECT posts.post_number AS post_number, user.username AS username, polls.poll_name AS poll_name, categories.category_name AS category_name,
            posts.post_text AS post_text, sum(chevron_vote.chevron_result) AS chevron_result, posts.post_date AS post_date, 
            COALESCE((SELECT chevron_vote.chevron_result FROM chevron_vote WHERE chevron_vote.user_id=1 and chevron_vote.post_id=post_number),0) AS user_chevron_result,
            COALESCE((SELECT yes_no.answer_yes FROM yes_no WHERE yes_no.user_id=1 and yes_no.post_id=post_number),0) AS user_yes_answer,
            COALESCE((SELECT yes_no.answer_no FROM yes_no WHERE yes_no.user_id=1 and yes_no.post_id=post_number),0) AS user_no_answer,
            COALESCE((SELECT bookmarks.user_bookmark FROM bookmarks WHERE bookmarks.user_id=1 and bookmarks.post_id=post_number),0) AS user_bookmark,
            posts.post_expiration_date AS post_expiration_date
            FROM posts join user on posts.user_id = user.id join polls on posts.poll_type = polls.poll_id join categories 
            on posts.post_category = categories.category_id join chevron_vote ON posts.post_number = chevron_vote.post_id
            WHERE COALESCE((SELECT bookmarks.user_bookmark FROM bookmarks WHERE bookmarks.user_id=14 and bookmarks.post_id=post_number),0) = 1
            GROUP BY posts.post_number ORDER BY posts.post_date DESC

//get posts and number of responses in each location
SELECT posts.post_loc_lat AS post_latitude, posts.post_loc_long AS post_longitude, (SELECT COUNT(post_number) FROM posts WHERE posts.post_loc_lat=post_latitude 
    AND post_loc_long=post_longitude GROUP BY post_loc_lat,post_loc_long) AS number_of_posts_in_location,(SELECT COUNT(yes_no.post_id) FROM yes_no 
    INNER JOIN posts ON yes_no.post_id=posts.post_number WHERE (yes_no.answer_yes=1 OR yes_no.answer_no=1) AND posts.post_loc_lat=post_latitude 
    AND posts.post_loc_long=post_longitude) AS number_of_responses_in_location 
    FROM posts INNER JOIN yes_no ON posts.post_number=yes_no.post_id GROUP BY post_loc_lat,post_loc_long;

ΕΠΟΜΕΝΑ TASK:

- ΝΑ ΦΤΙΑΞΩ ΛΙΓΟ ΤΑ FORMS ΩΣΤΑ ΝΑ ΜΗΝ ΜΕΓΑΛΩΝΟΥΝ ΟΤΑΝ ΕΜΦΑΝΙΖΟΥΝ ΚΑΠΟΙΑ ΕΙΔΟΠΟΙΗΣΗ(ΔΕΥΤΕΡΕΥΟΝ ΣΗΜΑΣΙΑΣ)
- Να δώσω τη δυνατότητα delete post.
- Να κατεβάζει τα αποτελέσματα σαν xls
- Ταξινόμηση στο approval με βάση το πλήθος των ψήφων
- Map που να δείχνει το event location όπου υπάρχει.

"wss://crowdsource.gamerwelfare.com"

DELETE FROM rating WHERE user_id=14 AND post_id=85;